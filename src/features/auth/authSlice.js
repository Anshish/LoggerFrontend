// Import necessary functions from Redux Toolkit
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// Import the authentication service
import authService from './authService';

// Retrieve user information from local storage if available
const user = JSON.parse(localStorage.getItem('user'));

// Initial state for the authentication slice
const initialState = {
    user: user ? user : null,   // Set user to null if not found in local storage
    isError: false,
    isSuccess: false,
    isLoading: false,
    message: ''
};

// Async thunk for user registration
export const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {
    try {
        // Call the register function from the authentication service
        return await authService.register(user);
    } catch (error) {
        // If there's an error during registration, extract error message
        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString();
        // Use rejectWithValue to handle the rejected state and pass the error message
        return thunkAPI.rejectWithValue({ message, status: error.response ? error.response.status : 500 });
    }
});

export const logout = createAsyncThunk('auth/logout', async () => {
    await authService.logout()
})

export const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {
    try {
        // Call the register function from the authentication service
        return await authService.login(user);
    } catch (error) {
        // If there's an error during registration, extract error message
        const message = (error.response && error.response.data && error.response.data.message) || error.message || error.toString();
        // Use rejectWithValue to handle the rejected state and pass the error message
        return thunkAPI.rejectWithValue({ message, status: error.response ? error.response.status : 500 });
    }
});

// Create the authentication slice
export const authSlice = createSlice({
    name: 'auth',   // Name of the slice
    initialState,   // Initial state defined above
    reducers: {
        // Reset function to reset the state values
        reset: (state) => {
            state.isError = false;
            state.isSuccess = false;
            state.isLoading = false;
            state.message = '';
        }
    },
    extraReducers:(builder)=>{
        builder
            .addCase(register.pending,(state)=>{
                state.isLoading = true;
            })
            .addCase(register.fulfilled,(state,action)=>{
                state.isLoading = false;
                state.isSuccess = true;
                state.user=action.payload
            })
            .addCase(register.rejected,(state,action)=>{
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload;
                state.user = null;
            })
            .addCase(logout.fulfilled,(state)=>{
                state.user = null;
            })
            .addCase(login.pending,(state)=>{
                state.isLoading = true;
            })
            .addCase(login.fulfilled,(state,action)=>{
                state.isLoading = false;
                state.isSuccess = true;
                state.user=action.payload
            })
            .addCase(login.rejected,(state,action)=>{
                state.isLoading = false;
                state.isError = true;
                state.message = action.payload;
                state.user = null;
            })
    }
});

// Export the reset action from the slice
export const { reset } = authSlice.actions;

// Export the reducer function generated by createSlice
export default authSlice.reducer;
